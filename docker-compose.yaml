version: '3.8'

services:
  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "8081:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - api_server

  invalidator:
    build:
      context: .
      dockerfile: Dockerfile.invalidator
    container_name: invalidator
    environment:
      - DATABASE_HOST=db
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=example
      - DATABASE_PORT=5432
      - MODULDE=invalidator
    volumes:
      - ./invalidator_logs:/var/log/invalidator
    depends_on:
      db:
        condition: service_healthy
  api_server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: api_server
    expose:
      - "8080"
    environment:
      - DATABASE_HOST=db
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=example
      - DATABASE_PORT=5432
      - MODULDE=api
    volumes:
      - ./api_logs:/var/log/api
    depends_on:
      db:
        condition: service_healthy

  db:
    image: postgres:latest
    container_name: db
    environment:
      POSTGRES_DB: mydb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: example
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./sql/create_databases.sql:/docker-entrypoint-initdb.d/create_databases.sql
      - db_data:/var/lib/postgresql/data

volumes:
  db_data:
